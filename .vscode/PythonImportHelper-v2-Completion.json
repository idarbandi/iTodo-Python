[
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "management",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "api.migrations.0001_initial",
        "description": "api.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Task',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),",
        "detail": "api.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "ApiConfig",
        "kind": 6,
        "importPath": "api.apps",
        "description": "api.apps",
        "peekOfCode": "class ApiConfig(AppConfig):\n    name = 'api'",
        "detail": "api.apps",
        "documentation": {}
    },
    {
        "label": "Task",
        "kind": 6,
        "importPath": "api.models",
        "description": "api.models",
        "peekOfCode": "class Task(models.Model):\n    title = models.CharField(max_length=200)\n    completed = models.BooleanField(default=False, blank=True, null=True)\n    def __str__(self):\n        return self.title",
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "TaskSerializer",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class TaskSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Task  # مدل مرتبط\n        fields = \"__all__\"  # شامل تمام فیلدهای مدل",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "TaskTests",
        "kind": 6,
        "importPath": "api.tests",
        "description": "api.tests",
        "peekOfCode": "class TaskTests(TestCase):\n    def setUp(self):\n        self.client = APIClient()\n        self.task = Task.objects.create(title=\"Test Task\", completed=False)\n    def test_task_list(self):\n        url = reverse(\"task-list\")\n        response = self.client.get(url)\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n    def test_task_detail(self):\n        url = reverse(\"task-detail\", kwargs={\"pk\": self.task.id})",
        "detail": "api.tests",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "api.urls",
        "description": "api.urls",
        "peekOfCode": "urlpatterns = [\n    # مسیر اصلی API\n    path(\"\", views.apiOverview, name=\"api-overview\"),\n    # مسیر لیست وظایف\n    path(\"task-list/\", views.taskList, name=\"task-list\"),\n    # مسیر جزئیات وظیفه (بر اساس کلید اصلی)\n    path(\"task-detail/<str:pk>/\", views.taskDetail, name=\"task-detail\"),\n    # مسیر ایجاد وظیفه جدید\n    path(\"task-create/\", views.taskCreate, name=\"task-create\"),\n    # مسیر بروزرسانی وظیفه (بر اساس کلید اصلی)",
        "detail": "api.urls",
        "documentation": {}
    },
    {
        "label": "apiOverview",
        "kind": 2,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "def apiOverview(request):\n\tapi_urls = {\n\t\t'List':'/task-list/',\n\t\t'Detail View':'/task-detail/<str:pk>/',\n\t\t'Create':'/task-create/',\n\t\t'Update':'/task-update/<str:pk>/',\n\t\t'Delete':'/task-delete/<str:pk>/',\n\t\t}\n\treturn Response(api_urls)\n@api_view(['GET'])",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "taskList",
        "kind": 2,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "def taskList(request):\n\ttasks = Task.objects.all().order_by('-id')\n\tserializer = TaskSerializer(tasks, many=True)\n\treturn Response(serializer.data)\n@api_view(['GET'])\ndef taskDetail(request, pk):\n\ttasks = Task.objects.get(id=pk)\n\tserializer = TaskSerializer(tasks, many=False)\n\treturn Response(serializer.data)\n@api_view(['POST'])",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "taskDetail",
        "kind": 2,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "def taskDetail(request, pk):\n\ttasks = Task.objects.get(id=pk)\n\tserializer = TaskSerializer(tasks, many=False)\n\treturn Response(serializer.data)\n@api_view(['POST'])\ndef taskCreate(request):\n\tserializer = TaskSerializer(data=request.data)\n\tif serializer.is_valid():\n\t\tserializer.save()\n\treturn Response(serializer.data)",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "taskCreate",
        "kind": 2,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "def taskCreate(request):\n\tserializer = TaskSerializer(data=request.data)\n\tif serializer.is_valid():\n\t\tserializer.save()\n\treturn Response(serializer.data)\n@api_view(['POST'])\ndef taskUpdate(request, pk):\n\ttask = Task.objects.get(id=pk)\n\tserializer = TaskSerializer(instance=task, data=request.data)\n\tif serializer.is_valid():",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "taskUpdate",
        "kind": 2,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "def taskUpdate(request, pk):\n\ttask = Task.objects.get(id=pk)\n\tserializer = TaskSerializer(instance=task, data=request.data)\n\tif serializer.is_valid():\n\t\tserializer.save()\n\treturn Response(serializer.data)\n@api_view(['DELETE'])\ndef taskDelete(request, pk):\n\ttask = Task.objects.get(id=pk)\n\ttask.delete()",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "taskDelete",
        "kind": 2,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "def taskDelete(request, pk):\n\ttask = Task.objects.get(id=pk)\n\ttask.delete()\n\treturn Response('Item succsesfully delete!')",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "\tapi_urls",
        "kind": 5,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "\tapi_urls = {\n\t\t'List':'/task-list/',\n\t\t'Detail View':'/task-detail/<str:pk>/',\n\t\t'Create':'/task-create/',\n\t\t'Update':'/task-update/<str:pk>/',\n\t\t'Delete':'/task-delete/<str:pk>/',\n\t\t}\n\treturn Response(api_urls)\n@api_view(['GET'])\ndef taskList(request):",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "\ttasks",
        "kind": 5,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "\ttasks = Task.objects.all().order_by('-id')\n\tserializer = TaskSerializer(tasks, many=True)\n\treturn Response(serializer.data)\n@api_view(['GET'])\ndef taskDetail(request, pk):\n\ttasks = Task.objects.get(id=pk)\n\tserializer = TaskSerializer(tasks, many=False)\n\treturn Response(serializer.data)\n@api_view(['POST'])\ndef taskCreate(request):",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "\tserializer",
        "kind": 5,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "\tserializer = TaskSerializer(tasks, many=True)\n\treturn Response(serializer.data)\n@api_view(['GET'])\ndef taskDetail(request, pk):\n\ttasks = Task.objects.get(id=pk)\n\tserializer = TaskSerializer(tasks, many=False)\n\treturn Response(serializer.data)\n@api_view(['POST'])\ndef taskCreate(request):\n\tserializer = TaskSerializer(data=request.data)",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "\ttasks",
        "kind": 5,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "\ttasks = Task.objects.get(id=pk)\n\tserializer = TaskSerializer(tasks, many=False)\n\treturn Response(serializer.data)\n@api_view(['POST'])\ndef taskCreate(request):\n\tserializer = TaskSerializer(data=request.data)\n\tif serializer.is_valid():\n\t\tserializer.save()\n\treturn Response(serializer.data)\n@api_view(['POST'])",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "\tserializer",
        "kind": 5,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "\tserializer = TaskSerializer(tasks, many=False)\n\treturn Response(serializer.data)\n@api_view(['POST'])\ndef taskCreate(request):\n\tserializer = TaskSerializer(data=request.data)\n\tif serializer.is_valid():\n\t\tserializer.save()\n\treturn Response(serializer.data)\n@api_view(['POST'])\ndef taskUpdate(request, pk):",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "\tserializer",
        "kind": 5,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "\tserializer = TaskSerializer(data=request.data)\n\tif serializer.is_valid():\n\t\tserializer.save()\n\treturn Response(serializer.data)\n@api_view(['POST'])\ndef taskUpdate(request, pk):\n\ttask = Task.objects.get(id=pk)\n\tserializer = TaskSerializer(instance=task, data=request.data)\n\tif serializer.is_valid():\n\t\tserializer.save()",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "\ttask",
        "kind": 5,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "\ttask = Task.objects.get(id=pk)\n\tserializer = TaskSerializer(instance=task, data=request.data)\n\tif serializer.is_valid():\n\t\tserializer.save()\n\treturn Response(serializer.data)\n@api_view(['DELETE'])\ndef taskDelete(request, pk):\n\ttask = Task.objects.get(id=pk)\n\ttask.delete()\n\treturn Response('Item succsesfully delete!')",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "\tserializer",
        "kind": 5,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "\tserializer = TaskSerializer(instance=task, data=request.data)\n\tif serializer.is_valid():\n\t\tserializer.save()\n\treturn Response(serializer.data)\n@api_view(['DELETE'])\ndef taskDelete(request, pk):\n\ttask = Task.objects.get(id=pk)\n\ttask.delete()\n\treturn Response('Item succsesfully delete!')",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "\ttask",
        "kind": 5,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "\ttask = Task.objects.get(id=pk)\n\ttask.delete()\n\treturn Response('Item succsesfully delete!')",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.asgi",
        "description": "backend.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "backend.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n# تنظیمات توسعه سریع - نامناسب برای تولید\n# مشاهده https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n# هشدار امنیتی: کلید مخفی استفاده شده در تولید را مخفی نگه دارید!\nSECRET_KEY = \"2)&r5g1*=8bwjgp!pm7sjq3b*k^ukq4l0%+(af$y279p1m$7q_\"\n# هشدار امنیتی: در تولید با حالت debug روشن اجرا نکنید!\nDEBUG = True\nALLOWED_HOSTS = []\n# تعریف برنامه‌ها\nINSTALLED_APPS = [",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "SECRET_KEY = \"2)&r5g1*=8bwjgp!pm7sjq3b*k^ukq4l0%+(af$y279p1m$7q_\"\n# هشدار امنیتی: در تولید با حالت debug روشن اجرا نکنید!\nDEBUG = True\nALLOWED_HOSTS = []\n# تعریف برنامه‌ها\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# تعریف برنامه‌ها\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# تعریف برنامه‌ها\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    # برنامه‌های داخلی",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    # برنامه‌های داخلی\n    \"api.apps.ApiConfig\",\n    \"frontend.apps.FrontendConfig\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]\nROOT_URLCONF = \"backend.urls\"",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "ROOT_URLCONF = \"backend.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "WSGI_APPLICATION = \"backend.wsgi.application\"\n# تنظیمات پایگاه داده\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": os.path.join(BASE_DIR, \"db.sqlite3\"),\n    }\n}\n# if you are willing to use postgresql",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": os.path.join(BASE_DIR, \"db.sqlite3\"),\n    }\n}\n# if you are willing to use postgresql\n# DATABASES = {\n#     'default': {\n#         'ENGINE': 'django.db.backends.postgresql',",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# فایل‌های استاتیک (CSS، JavaScript، تصاویر)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = \"/static/\"",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# فایل‌های استاتیک (CSS، JavaScript، تصاویر)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = \"/static/\"",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# فایل‌های استاتیک (CSS، JavaScript، تصاویر)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = \"/static/\"",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# فایل‌های استاتیک (CSS، JavaScript، تصاویر)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = \"/static/\"",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "USE_TZ = True\n# فایل‌های استاتیک (CSS، JavaScript، تصاویر)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\nSTATIC_URL = \"/static/\"",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "backend.settings",
        "description": "backend.settings",
        "peekOfCode": "STATIC_URL = \"/static/\"",
        "detail": "backend.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.urls",
        "description": "backend.urls",
        "peekOfCode": "urlpatterns = [\n    # مسیر مدیریت جنگو\n    path(\"admin/\", admin.site.urls),\n    # مسیرهای مربوط به API\n    path(\"api/\", include(\"api.urls\")),\n    # مسیرهای مربوط به قسمت فرانت‌اند\n    path(\"\", include(\"frontend.urls\")),\n]",
        "detail": "backend.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.wsgi",
        "description": "backend.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "backend.wsgi",
        "documentation": {}
    },
    {
        "label": "FrontendConfig",
        "kind": 6,
        "importPath": "frontend.apps",
        "description": "frontend.apps",
        "peekOfCode": "class FrontendConfig(AppConfig):\n    name = 'frontend'",
        "detail": "frontend.apps",
        "documentation": {}
    },
    {
        "label": "FrontendTests",
        "kind": 6,
        "importPath": "frontend.tests",
        "description": "frontend.tests",
        "peekOfCode": "class FrontendTests(TestCase):\n    def test_list_view(self):\n        url = reverse(\"list\")  # Assumes the URL pattern name is 'list'\n        response = self.client.get(url)\n        self.assertEqual(response.status_code, 200)\n        self.assertTemplateUsed(response, \"frontend/list.html\")",
        "detail": "frontend.tests",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "frontend.urls",
        "description": "frontend.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", views.list, name=\"list\"),\n]",
        "detail": "frontend.urls",
        "documentation": {}
    },
    {
        "label": "list",
        "kind": 2,
        "importPath": "frontend.views",
        "description": "frontend.views",
        "peekOfCode": "def list(request):\n    return render(request, \"frontend/list.html\")",
        "detail": "frontend.views",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc",
        "detail": "manage",
        "documentation": {}
    }
]